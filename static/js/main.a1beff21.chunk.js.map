{"version":3,"sources":["SearchComponent.tsx","Selection.tsx","ResultComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SearchComponent","props","MAX_RESULTS_PER_PAGE","onSearchInputChange","event","setState","text","target","value","onRangeInputChange","numResults","parseInt","onRangeChange","onButtonClick","onInputChange","state","setDropdownOptions","options","i","push","dropdownOptions","className","id","this","onChange","type","onClick","Component","Selection","canvas","movie","Title","Released","Runtime","Genre","Director","Plot","poster","React","createRef","getTitleInformation","prevProps","prevState","title","draw","a","fetch","encodeURI","response","ok","alert","status","json","result","Response","responseID","fetchAndSaveImage","console","log","Poster","Image","onload","src","current","Error","ctx","getContext","clearRect","width","height","drawImage","ref","ResultComponent","onNextButtonClick","Math","ceil","totalResults","pageNumber","temp","onPrevButtonClick","onTitleButtonClick","selectedTitle","currentTarget","innerText","selectedID","results","getMovieData","apiPageNumber","titles","Number","movieTitles","Search","parsedResult","map","imdbID","concat","min","App","updateQuery","newQuery","query","updateRange","newRange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OA8EeA,E,kDA1DX,WAAYC,GAAa,IAAD,8BACpB,cAAMA,IAHVC,qBAA+B,EAEP,EAUxBC,oBAAsB,SAACC,GACnB,EAAKC,SAAS,CACVC,KAAMF,EAAMG,OAAOC,SAZH,EAiBxBC,mBAAqB,SAACL,GAClB,EAAKC,SAAS,CACVK,WAAYC,SAASP,EAAMG,OAAOC,SAEtC,EAAKP,MAAMW,cAAcR,EAAMG,OAAOC,QArBlB,EAyBxBK,cAAgB,SAACT,GACb,EAAKH,MAAMa,cAAc,EAAKC,MAAMT,OA1BhB,EA8BxBU,mBAAqB,WAEjB,IADA,IAAIC,EAAiB,GACZC,EAAI,EAAGA,GAAK,EAAKhB,qBAAsBgB,IAC5CD,EAAQE,KAAK,wBAAQX,MAAOU,EAAf,SAAqB,GAAFA,KAEpC,OAAOD,GAjCP,EAAKF,MAAQ,CACTT,KAAM,kCACNc,gBAAiB,EAAKJ,qBACtBN,WAAY,GALI,E,0CAsCxB,WACI,OACI,sBAAKW,UAAU,iBAAf,UACQ,uBAAOC,GAAG,aACNd,MAAOe,KAAKR,MAAMT,KAClBkB,SAAUD,KAAKpB,oBACfsB,KAAK,SAEb,wBAAQJ,UAAU,gBAAgBK,QAASH,KAAKV,cAAhD,oBACA,mDAAqB,wBAAQL,MAAOe,KAAKR,MAAML,WAAYc,SAAUD,KAAKd,mBAArD,SAA0Ec,KAAKR,MAAMK,4B,GAnD5FO,a,uBCsHfC,E,kDAnHX,WAAY3B,GAAa,IAAD,8BACpB,cAAMA,IAHV4B,YAEwB,EAEpB,EAAKd,MAAQ,CACTe,MAAO,CAACC,MAAO,UACXC,SAAU,UACVC,QAAS,UACTC,MAAO,UACPC,SAAU,UACVC,KAAM,WACVC,OAAQ,MAEZ,EAAKR,OAASS,IAAMC,YAXA,E,qDAcxB,WACIhB,KAAKiB,wB,gCAKT,SAAmBC,EAAgBC,GAC3BnB,KAAKtB,MAAM0C,QAAUF,EAAUE,OAC/BpB,KAAKiB,sBAELjB,KAAKR,MAAMsB,SAAWK,EAAUL,QAChCd,KAAKqB,S,wEAKb,uCAAAC,EAAA,+EAG6BC,MAAM,8BAAgCC,UAAUxB,KAAKtB,MAAM0C,OAC3E,8BAJb,WAGYK,EAHZ,QAKsBC,GALtB,uBAMYC,MAAM,eAAiBF,EAASG,QAN5C,0CAS2BH,EAASI,OATpC,UAYgC,WAHpBC,EATZ,QAYmBC,SAZnB,kCAamCR,MAAM,8BAAgCC,UAAUxB,KAAKtB,MAAMqB,IAC7E,8BAdjB,WAagBiC,EAbhB,OAeiBP,EAASC,GAf1B,wBAgBgBC,MAAM,eAAiBF,EAASG,QAhBhD,4CAmB2BI,EAAWH,OAnBtC,QAmBYC,EAnBZ,eAuBQ9B,KAAKlB,SAAS,CACVyB,MAAOuB,IACR,WACC,EAAKG,uBA1BjB,kDA8BQN,MAAM,iDACNO,QAAQC,IAAR,MA/BR,0D,qFAqCA,WAAqB,IAAD,OAChB,GAAgC,QAA5BnC,KAAKR,MAAMe,MAAM6B,OAArB,CAMA,IAAItB,EAA2B,IAAIuB,MACnCvB,EAAOwB,OAAS,WACZ,EAAKxD,SAAS,CACVgC,OAAQA,KAGhBA,EAAOyB,IAAMvC,KAAKR,MAAMe,MAAM6B,YAX1BpC,KAAKlB,SAAU,CACXgC,OAAQ,S,kBAcpB,WACI,IAAIR,EAASN,KAAKM,OAAOkC,QACzB,GAAe,OAAXlC,EAAiB,MAAMmC,MAAM,wBACjC,IAAIC,EAAMpC,EAAOqC,WAAW,MAC5B,GAAY,OAARD,EAAc,MAAMD,MAAM,oCAC9BC,EAAIE,UAAU,EAAG,EAAGtC,EAAOuC,MAAOvC,EAAOwC,QAEf,OAAtB9C,KAAKR,MAAMsB,SACXR,EAAOuC,MAAQ7C,KAAKR,MAAMsB,OAAO+B,MACjCvC,EAAOwC,OAAS9C,KAAKR,MAAMsB,OAAOgC,OAClCJ,EAAIK,UAAU/C,KAAKR,MAAMsB,OAAQ,EAAG,M,oBAM5C,WACI,OACI,sBAAKf,GAAG,YAAR,UACI,6BAAKC,KAAKR,MAAMe,MAAMC,QACtB,8BAAG,+CAAsBR,KAAKR,MAAMe,MAAME,YAC1C,8BAAG,0CAAiBT,KAAKR,MAAMe,MAAMG,WACrC,8BAAG,wCAAeV,KAAKR,MAAMe,MAAMI,SACnC,8BAAG,2CAAkBX,KAAKR,MAAMe,MAAMK,YACtC,4BAAIZ,KAAKR,MAAMe,MAAMM,OACrB,wBAAQmC,IAAKhD,KAAKM,gB,GAjHVF,aCkJT6C,E,kDA/IX,WAAYvE,GAAa,IAAD,8BACpB,cAAMA,IA0FVwE,kBAAoB,WAChB,GAAIC,KAAKC,KAAK,EAAK5D,MAAM6D,cAAwC,GAAxB,EAAK3E,MAAMS,YAAmB,GAAK,EAAKK,MAAM8D,WAAY,CAC/F,IAAIC,EAAe,EAAK/D,MAAM8D,WAAa,EAC3C,EAAKxE,SAAS,CACVwE,WAAYC,MA/FA,EAsGxBC,kBAAoB,WAChB,GAAI,EAAKhE,MAAM8D,WAAa,EAAG,CAC3B,IAAIC,EAAe,EAAK/D,MAAM8D,WAAa,EAC3C,EAAKxE,SAAS,CACVwE,WAAYC,MA1GA,EAgHxBE,mBAAqB,SAAC5E,GAClB,EAAKC,SAAS,CACV4E,cAAe7E,EAAM8E,cAAcC,UACnCC,WAAYhF,EAAM8E,cAAc1E,SAjHpC,EAAKO,MAAQ,CACTsE,QAAS,GACTT,aAAc,EACdC,WAAY,EACZI,cAAe,WACfG,WAAY,aAPI,E,qDAWxB,WACI7D,KAAK+D,iB,gCAIT,SAAmB7C,EAAgBC,GAAiB,IAAD,OAC3CnB,KAAKtB,MAAM0C,QAAUF,EAAUE,OAASpB,KAAKtB,MAAMS,aAAe+B,EAAU/B,WAC5Ea,KAAKlB,SAAS,CACVwE,WAAY,IACb,WACC,EAAKS,kBAEF/D,KAAKR,MAAM8D,aAAenC,EAAUmC,YAC3CtD,KAAK+D,iB,iEAOb,+CAAAzC,EAAA,+DAEY0C,EAAwBhE,KAAKR,MAAM8D,WAAatD,KAAKtB,MAAMS,WAAa,EACxE8E,EAAgB,GAEXtE,EAAYqE,EAL7B,YAK4CrE,EAAIuE,OAAOF,GAAiBE,OAAOlE,KAAKtB,MAAMS,aAL1F,wBAMY+C,QAAQC,IAAIxC,GANxB,SASiC4B,MAAM,8BAAgCC,UAAUxB,KAAKtB,MAAM0C,OAC3E,SAAUzB,EAAG,oBAV9B,WASgB8B,EAThB,QAW0BC,GAX1B,wBAYgBC,MAAM,eAAiBF,EAASG,QAZhD,4CAe+BH,EAASI,OAfxC,WAmBoC,UAJpBC,EAfhB,QAmBuBC,SAnBvB,oBAoBoBoC,EAAqBrC,EAAOsC,OAC5BC,EAAeF,EAAYG,KAAI,SAAA/D,GAAK,OACpC,oBAAIT,UAAU,eAAd,SACI,wBAAQK,QAAS,EAAKsD,mBACdxE,MAAOsB,EAAMgE,OADrB,SAC6B,4BAAIhE,EAAMC,SADQD,EAAMgE,aAI7DN,EAASA,EAAOO,OAAOH,GAEvBrE,KAAKlB,SAAS,CACVuE,aAAcvB,EAAOuB,iBAIf,IAAL1D,EAAE,GAAQmC,EAAOuB,cAlCtC,oFAwCgBY,EAAS,CAAC,uFACVjE,KAAKlB,SAAS,CACVuE,aAAc,IA1ClC,6BAKuG1D,IALvG,uBAgDQK,KAAKlB,SAAS,CACVgF,QAASG,IAjDrB,kDAsDQtC,MAAM,mDACNO,QAAQC,IAAR,MAvDR,0D,0EAwFA,WACI,OACI,sBAAKrC,UAAU,iBAAf,UACI,sBAAKC,GAAG,cAAR,UACI,oBAAID,UAAU,SAAd,SAAwBE,KAAKR,MAAMsE,UAEnC,sBAAK/D,GAAG,aAAR,UACA,wBAAQD,UAAU,gBAAgBK,QAASH,KAAKwD,kBAAhD,2BACA,wBAAQ1D,UAAU,gBAAgBK,QAASH,KAAKkD,kBAAhD,uBACA,+DAAkClD,KAAKR,MAAM8D,WAAW,GAAGtD,KAAKtB,MAAMS,WAAW,IAA0B,GAAtBa,KAAKtB,MAAMS,WAAc,GAA9G,YAA2HgE,KAAKsB,KAAKzE,KAAKR,MAAM8D,WAAW,GAAGtD,KAAKtB,MAAMS,WAAW,GAChLa,KAAKR,MAAM6D,cADf,OACkCrD,KAAKR,MAAM6D,sBAIjD,cAAC,EAAD,CAAWjC,MAAOpB,KAAKR,MAAMkE,cAAe3D,GAAIC,KAAKR,MAAMqE,oB,GAvI7CzD,aCsCfsE,E,kDAlCb,WAAYhG,GAAa,IAAD,8BACtB,cAAMA,IAQRiG,YAAc,SAACC,GACb,EAAK9F,SAAS,CACV+F,MAAOD,KAXW,EAgBxBE,YAAc,SAACC,GACX,EAAKjG,SAAS,CACVK,WAAY4F,KAhBlB,EAAKvF,MAAQ,CACTqF,MAAO,WACP1F,WAAY,GAJM,E,0CAsBxB,WACE,OACI,gCACE,oBAAIY,GAAG,UAAP,4BACA,cAAC,EAAD,CAAiBR,cAAeS,KAAK2E,YAAatF,cAAeW,KAAK8E,cACtE,cAAC,EAAD,CAAiB1D,MAAOpB,KAAKR,MAAMqF,MAAO1F,WAAYa,KAAKR,MAAML,oB,GA7BzDiB,aCJH4E,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a1beff21.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\ninterface SearchComponentProps {\r\n    onInputChange(query: string): void; //updates App.tsx when the query changes\r\n    onRangeChange(number: any): void; //updates App.tsx when the page range changes\r\n}\r\n\r\ninterface SearchComponentState {\r\n    text: any; //text input by the user\r\n    dropdownOptions: any[]; //options for the number of results per page\r\n    numResults: number; //current number of results per page\r\n}\r\n\r\n/**\r\n * A search bar that receives the user's query.\r\n */\r\nclass SearchComponent extends Component<SearchComponentProps, SearchComponentState> {\r\n\r\n    MAX_RESULTS_PER_PAGE: number = 5;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            text: \"What movie are you thinking of?\",\r\n            dropdownOptions: this.setDropdownOptions(),\r\n            numResults: 1\r\n        }\r\n    }\r\n\r\n    //Update the state to reflect the new search text.\r\n    onSearchInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            text: event.target.value\r\n        });\r\n    }\r\n\r\n    //Update the state to reflect the new results page range.\r\n    onRangeInputChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        this.setState({\r\n            numResults: parseInt(event.target.value)\r\n        });\r\n        this.props.onRangeChange(event.target.value);\r\n    }\r\n\r\n    //Updates App.tsx with the new query.\r\n    onButtonClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        this.props.onInputChange(this.state.text);\r\n    }\r\n\r\n    //Generate the options for the dropdown menu.\r\n    setDropdownOptions = (): any[] => {\r\n        let options: any[] = [];\r\n        for (let i = 1; i <= this.MAX_RESULTS_PER_PAGE; i++) {\r\n            options.push(<option value={i}>{i*10}</option>);\r\n        }\r\n        return options;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='inline-display'>\r\n                    <input id=\"search-bar\"\r\n                        value={this.state.text}\r\n                        onChange={this.onSearchInputChange}\r\n                        type=\"text\"\r\n                        />\r\n                <button className=\"search-button\" onClick={this.onButtonClick}>Search</button>\r\n                <p>Results per page: <select value={this.state.numResults} onChange={this.onRangeInputChange}>{this.state.dropdownOptions}</select></p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default SearchComponent;","import React, {Component} from 'react';\r\n\r\ninterface SelectionProps {\r\n    title: string; //the title of the movie the user selected\r\n    id: string; //the ID of the movie the user selected\r\n}\r\n\r\ninterface SelectionState {\r\n    movie: any; //an object holding the response from the API\r\n    poster: HTMLImageElement | null; //the movie's poster\r\n}\r\n\r\n/**\r\n * Displays details from the selected title.\r\n */\r\nclass Selection extends Component<SelectionProps, SelectionState> {\r\n\r\n    canvas: React.RefObject<HTMLCanvasElement>; //the canvas to draw the poster on\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            movie: {Title: 'Default',\r\n                Released: \"Default\",\r\n                Runtime: \"Default\",\r\n                Genre: \"Default\",\r\n                Director: \"Default\",\r\n                Plot: \"Default\"},\r\n            poster: null\r\n        };\r\n        this.canvas = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getTitleInformation();\r\n    }\r\n\r\n    //If the movie title changed, retrieve the new movie information. If the poster changed,\r\n    //redraw the canvas.\r\n    componentDidUpdate(prevProps: any, prevState: any) {\r\n        if (this.props.title !== prevProps.title) {\r\n            this.getTitleInformation();\r\n        }\r\n        if (this.state.poster !== prevState.poster) {\r\n            this.draw();\r\n        }\r\n    }\r\n\r\n    //Makes a query to the API using this.props.title, stores the parsed result in this.state.movie.\r\n    async getTitleInformation() {\r\n        try {\r\n            //First, try querying with the title.\r\n            let response = await fetch(\"https://www.omdbapi.com/?t=\" + encodeURI(this.props.title)\r\n                +\"&plot=full&apikey=fa79688c\");\r\n            if (!response.ok) {\r\n                alert(\"Bad status: \" + response.status);\r\n                return;\r\n            }\r\n            let result = await response.json();\r\n\r\n            //If the query isn't successful with the title, try searching with the ID instead.\r\n            if (result.Response === \"False\") {\r\n                let responseID = await fetch(\"https://www.omdbapi.com/?i=\" + encodeURI(this.props.id)\r\n                    +\"&plot=full&apikey=fa79688c\");\r\n                if (!response.ok) {\r\n                    alert(\"Bad status: \" + response.status);\r\n                    return;\r\n                }\r\n                result = await responseID.json();\r\n            }\r\n\r\n            //Update state. When complete, it's safe to load the image for the poster.\r\n            this.setState({\r\n                movie: result\r\n            }, () => {\r\n                this.fetchAndSaveImage();\r\n            });\r\n\r\n        } catch (e) {\r\n            alert(\"There was a problem connecting to the server.\");\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    //If this movie has a poster, load an new HTMLImageElement in this.state.poster and set\r\n    //its source.\r\n    fetchAndSaveImage() {\r\n        if (this.state.movie.Poster === \"N/A\") {\r\n            this.setState( {\r\n                poster: null\r\n            });\r\n            return;\r\n        }\r\n        let poster: HTMLImageElement = new Image();\r\n        poster.onload = () => {\r\n            this.setState({\r\n                poster: poster\r\n            })\r\n        }\r\n        poster.src = this.state.movie.Poster;\r\n    }\r\n\r\n    //Clears the current canvas and if the poster exists, draws the poster.\r\n    draw() {\r\n        let canvas = this.canvas.current;\r\n        if (canvas === null) throw Error(\"No canvas reference.\");\r\n        let ctx = canvas.getContext(\"2d\");\r\n        if (ctx === null) throw Error(\"Can't draw, no graphics context.\");\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (this.state.poster !== null) {\r\n            canvas.width = this.state.poster.width;\r\n            canvas.height = this.state.poster.height;\r\n            ctx.drawImage(this.state.poster, 0, 0);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='selection'>\r\n                <h1>{this.state.movie.Title}</h1>\r\n                <p><b>Release date: </b>{this.state.movie.Released}</p>\r\n                <p><b>Runtime: </b>{this.state.movie.Runtime}</p>\r\n                <p><b>Genre: </b>{this.state.movie.Genre}</p>\r\n                <p><b>Director: </b>{this.state.movie.Director}</p>\r\n                <p>{this.state.movie.Plot}</p>\r\n                <canvas ref={this.canvas}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Selection;","import React, {Component} from 'react';\r\nimport Selection from './Selection';\r\n\r\ninterface ResultComponentProps {\r\n    title: string, //the title the user wants to search for\r\n    numResults: number //the number of API pages per page of user results\r\n}\r\n\r\ninterface ResultComponentState {\r\n    results: any; //a formatted list of ten or less buttons with the titles of the result's movies\r\n    totalResults: number; //number of total results for the search\r\n    pageNumber: number; //the page number the results came from\r\n    selectedTitle: string; //the title the movie the user has selected\r\n    selectedID: string; //the ID of the movie the user has selected\r\n}\r\n\r\nclass ResultComponent extends Component<ResultComponentProps, ResultComponentState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            results: [],\r\n            totalResults: 0,\r\n            pageNumber: 0,\r\n            selectedTitle: \"Iron Man\",\r\n            selectedID: \"tt0371746\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getMovieData();\r\n    }\r\n\r\n    //If title changed, reset page number and request data. If page number changed, re-request the data.\r\n    componentDidUpdate(prevProps: any, prevState: any) {\r\n        if (this.props.title !== prevProps.title || this.props.numResults !== prevProps.numResults) {\r\n            this.setState({\r\n                pageNumber: 0,\r\n            }, () => {\r\n                this.getMovieData();\r\n            });\r\n        } else if (this.state.pageNumber !== prevState.pageNumber) {\r\n            this.getMovieData();\r\n        }\r\n\r\n    }\r\n\r\n    //Makes a query to the API using this.props.title and this.state.pageNumber. Sets this.state.results and\r\n    // this.state.numResults accordingly.\r\n    async getMovieData() {\r\n        try {\r\n            let apiPageNumber: number = this.state.pageNumber * this.props.numResults + 1;\r\n            let titles: any[] = [];\r\n\r\n            for (let i: number = apiPageNumber; i < Number(apiPageNumber) + Number(this.props.numResults); i++) {\r\n                console.log(i);\r\n\r\n                //Request a list of movies from the API.\r\n                let response = await fetch(\"https://www.omdbapi.com/?s=\" + encodeURI(this.props.title)\r\n                    +\"&page=\"+ i +\"&apikey=fa79688c\");\r\n                if (!response.ok) {\r\n                    alert(\"Bad status: \" + response.status);\r\n                    return;\r\n                }\r\n                let result = await response.json();\r\n\r\n                //If the response has search results, format into a list of button elements with the imdbID as the key.\r\n                //Update state with the total number of results accordingly.\r\n                if (result.Response === \"True\") {\r\n                    let movieTitles: any[] = result.Search;\r\n                    let parsedResult = movieTitles.map(movie => (\r\n                        <li className=\"title-button\">\r\n                            <button onClick={this.onTitleButtonClick} key={movie.imdbID}\r\n                                    value={movie.imdbID}><b>{movie.Title}</b></button>\r\n                        </li>\r\n                    ));\r\n                    titles = titles.concat(parsedResult);\r\n\r\n                    this.setState({\r\n                        totalResults: result.totalResults\r\n                    });\r\n\r\n                    //If this is the last page of results, exit.\r\n                    if ((i+1)*10 > result.totalResults) {\r\n                        break;\r\n                    }\r\n\r\n                } else {\r\n                    //Otherwise, indicate that the search was unsuccessful and exit.\r\n                    titles = [<li>I'm sorry, I couldn't find anything for that search.</li>];\r\n                    this.setState({\r\n                        totalResults: 0\r\n                    });\r\n                    break;\r\n                }\r\n            }\r\n\r\n            this.setState({\r\n                results: titles,\r\n            });\r\n\r\n\r\n        } catch (e) {\r\n            alert(\"There was a problem connecting with the server.\")\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    //Increment this.state.pageNumber by one.\r\n    onNextButtonClick = () => {\r\n        if (Math.ceil(this.state.totalResults / (this.props.numResults * 10) - 1) > this.state.pageNumber) {\r\n            let temp: number = this.state.pageNumber + 1;\r\n            this.setState({\r\n                pageNumber: temp\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    //Decrement the this.state.pageNumber by one.\r\n    onPrevButtonClick = () => {\r\n        if (this.state.pageNumber > 0) {\r\n            let temp: number = this.state.pageNumber - 1;\r\n            this.setState({\r\n                pageNumber: temp\r\n            })\r\n        }\r\n    }\r\n\r\n    //Update which movie title is currently selected.\r\n    onTitleButtonClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        this.setState({\r\n            selectedTitle: event.currentTarget.innerText,\r\n            selectedID: event.currentTarget.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='inline-display'>\r\n                <div id=\"titles-list\">\r\n                    <ul className=\"titles\">{this.state.results}</ul>\r\n\r\n                    <div id=\"pagination\">\r\n                    <button className='search-button' onClick={this.onPrevButtonClick}>Previous page</button>\r\n                    <button className='search-button' onClick={this.onNextButtonClick}>Next page</button>\r\n                    <p>Currently displaying results {(this.state.pageNumber+1)*this.props.numResults*10-(this.props.numResults*10-1)} through {Math.min((this.state.pageNumber+1)*this.props.numResults*10,\r\n                        this.state.totalResults)} of {this.state.totalResults}</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <Selection title={this.state.selectedTitle} id={this.state.selectedID}/>\r\n\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default ResultComponent;","import React, {Component} from 'react';\nimport './App.css';\nimport SearchComponent from './SearchComponent';\nimport ResultComponent from \"./ResultComponent\";\n\n\ninterface AppState {\n    query: string; //search input by the user\n    numResults: number; //number of results per page\n}\n\n/**\n * A movie database that searches for movies based on the user's query and allows them to\n * select titles the results to get more information. The query flows from SearchComponent to\n * App to ResultComponent. The selected title flows from ResultComponent to Selection.\n *\n * Defaults to showing information about Iron Man.\n */\nclass App extends Component<{}, AppState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n        query: \"Iron Man\",\n        numResults: 1\n    };\n  }\n\n  //Update this.state with new query text.\n  updateQuery = (newQuery: string) => {\n    this.setState({\n        query: newQuery,\n    });\n  }\n\n  //Updates this.state with new range of search results.\n  updateRange = (newRange: any) => {\n      this.setState({\n          numResults: newRange\n      });\n  }\n\n  render() {\n    return (\n        <div>\n          <h1 id='heading'>Movie Metadata</h1>\n          <SearchComponent onInputChange={this.updateQuery} onRangeChange={this.updateRange}/>\n          <ResultComponent title={this.state.query} numResults={this.state.numResults}/>\n        </div>\n    )\n  }\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}